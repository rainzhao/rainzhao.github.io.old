{
  "name": "Rainzhao.GitHub.io",
  "tagline": "rainzhao",
  "body": "**# angular指令**\r\n### 1.一个简单的指令\r\n （1）指令的四种使用方式  \r\n<pre>\r\n    //a.html\r\n    &lt;hello&gt;&lt;/hello&gt;\r\n    &lt;div hello&gt;&lt;/div&gt;\r\n    &lt;div class=\"hello\"&gt;&lt;/div&gt;\r\n    &lt;!-- directive:hello --&gt;\r\n\r\n    //a.js\r\n    var myModule = angular.module('helloDirective',[]);\r\n    myModule.directive('hello',function(){\r\n        return{\r\n            restrict: 'ECAM',\r\n            template: '<div>Hi angular!</div>',\r\n            replace: true\r\n        }\r\n    });\r\n    </pre>\r\n   （2）使用templateUrl加载指令这样加载可写更多的html代码\r\n    <pre>myModule.directive('hello',function(){\r\n        return{\r\n            restrict: 'ECAM',\r\n            templateUrl: 'templates/hello.html',\r\n            replace: true\r\n        }\r\n    })</pre>\r\n    （3）使用$templateCache将模版缓存起来然后加载\r\n    <pre> \r\n    //run方法等所有模块注入完成后执行一次\r\n    myModule.run(function($templateCache){\r\n        $templateCache.put(\"1.html\",\"<div>hello template Cache</div>\");\r\n    })\r\n\r\n    myModule.directive(\"hello\",function($templateCache){\r\n        return{\r\n            restrict : 'EACM',\r\n            template: $templateCache.get(\"1.html\"),\r\n            replace: true\r\n        }\r\n    });</pre>\r\n### 2.directive&directive(指令之间的请求)\r\n创建一个新的指令，假设第一个指令已经应用，在父级元素上你可以请求到它或者在同一级的元素上。如果你需要访问一些功能在这个主要的指令上，通过暴露controller指令可以访问到它（注意这里的controller不是控制器中的controller）：\r\n<pre>ui.directive('a', function(){\r\n  return {\r\n    controller: function(){\r\n      this.data = {}\r\n      this.changeData = function( ... ) { ... }\r\n    },\r\n    link: ($scope, $element, $attributes, controller) {\r\n      controller.data = { ... }\r\n    }\r\n  }\r\n})\r\nmyApp.directive('b', function(){\r\n  return {\r\n    require: 'a',\r\n    link: ($scope, $element, $attributes, aController) {\r\n      aController.changeData()\r\n      aContr`oller.data = { ... }\r\n    }\r\n  }\r\n})</pre>\r\n### 3.directive&controller(指令与控制器之间的请求)\r\n<pre>\r\n//directive&controller.js\r\nvar myModule = angular.module(\"myModule\",[]);\r\nmyModule.controller(\"MyCtrl\",[\"$scope\",function($scope){\r\n        $scope.loadData = function(){\r\n            console.log(\"数据加载中....\");\r\n        }\r\n    }])\r\n    .controller(\"MyCtrl2\",[\"$scope\",function($scope){\r\n        $scope.loadData2 = function(){\r\n            console.log(\"数据加载中....2222\");\r\n        }\r\n    }]);</pre>\r\n\r\n//在不同的controller中复用指令\r\n<pre>myModule.directive(\"loader\",function(){\r\n    return{\r\n        restrict:'AE',\r\n        template:\"<div>滑动加载</div>\",\r\n        replace: true,\r\n        link:function(scope,element,attr){\r\n            element.bind(\"mouseenter\",function(){\r\n                scope.$apply(attr.howtoload);\r\n            })\r\n        }\r\n    }\r\n})\r\n\r\n//index.html\r\n    &lt;div ng-controller=\"MyCtrl\"&gt;\r\n        &lt;loader howToLoad=\"loadData()\"&gt;&lt;/loader&gt;\r\n    &lt;/div>\r\n    &lt;div ng-controller=\"MyCtrl2\">\r\n        &lt;loader howToLoad=\"loadData2()\"&gt;&lt;/loader&gt;\r\n    &lt;/div&gt;\r\n</pre>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}